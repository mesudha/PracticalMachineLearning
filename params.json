{
  "name": "Practical Machine Learning",
  "tagline": "Practical Machine Learning Course Project",
  "body": "# Practical Machine Learning Course Project\r\nSudha Bhandari \r\nApril 6, 2016  \r\n\r\nExecutive Summary\r\n===\r\nData collection about personal activity has been more easy with the availability of devices such as Jawbone Up, Nike FuelBand, and Fitbit. These sort of devices are used to record self movement. In this project , I will try and analyze dataset from the measurements of activities by group of enthusiasts. I will use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. \r\n\r\nThe goal of this project is to predict the manner in which they did the exercise. This is the \"classe\" variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.\r\n\r\nLoading libraries\r\n===\r\n\r\n```r\r\nlibrary(caret)\r\n```\r\n\r\n```\r\n## Loading required package: lattice\r\n```\r\n\r\n```\r\n## Loading required package: ggplot2\r\n```\r\n\r\n```r\r\nlibrary(gbm)\r\n```\r\n\r\n```\r\n## Warning: package 'gbm' was built under R version 3.2.4\r\n```\r\n\r\n```\r\n## Loading required package: survival\r\n```\r\n\r\n```\r\n## \r\n## Attaching package: 'survival'\r\n```\r\n\r\n```\r\n## The following object is masked from 'package:caret':\r\n## \r\n##     cluster\r\n```\r\n\r\n```\r\n## Loading required package: splines\r\n```\r\n\r\n```\r\n## Loading required package: parallel\r\n```\r\n\r\n```\r\n## Loaded gbm 2.1.1\r\n```\r\n\r\nLoading Dataset\r\n===\r\nDataset to develop model and validate model is downloaded from provided link.\r\n\r\nThe training data for this project are available here:\r\n[training dataset](https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv)\r\n\r\nThe test data are available here:\r\n[testing dataset](https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv)\r\n\r\nTo load data to R, you can download it manually or by using following commands:\r\n\r\n```r\r\ntrain_file <- \"pml-training.csv\"\r\ntest_file <- \"pml-testing.csv\" \r\ntrain_url <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\r\nif(!file.exists(train_file)){\r\n    download.file(train_url)    \r\n}\r\n\r\ntest_url <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\r\nif(!file.exists(test_file)){\r\n    download.file(test_url)  \r\n}\r\n```\r\n\r\nAfter downloading the dataset, load the dataset into R\r\n\r\n```r\r\ntrain_data <- read.csv(train_file, na.strings = c(\"#DIV/0!\",\"NA\"))\r\nfinal_test_data <- read.csv(test_file, na.strings = c(\"#DIV/0!\",\"NA\"))\r\n```\r\n\r\n# Cleaning Data\r\nFirst five columns(X,user_name,raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp) has no significance in building a prediction model. So, remove first five columns\r\n\r\n```r\r\ntrain_data <- subset(train_data, select = - (1:5))\r\n\r\n# remove variables with nearly zero variance\r\nzerovarIndex<- nearZeroVar(train_data)\r\ntrain_data <- train_data[, -zerovarIndex]\r\n\r\n# remove variables that are almost always NA\r\nmostlyNA <- sapply(train_data, function(x) mean(is.na(x))) > 0.9\r\ntrain_data <- train_data[, mostlyNA==F]\r\n```\r\n\r\nModel Building\r\n===\r\nI decided to use RandomForest model to see if it returns acceptable performance. I will be using `train` function in `caret` package to train the model and use 10-fold cross validation.\r\n\r\n```r\r\n#partition the dataset into train and test set\r\ndataIndex <- createDataPartition(train_data$classe, p = 0.7, list = FALSE)\r\ntraining_set <- train_data[dataIndex,]\r\ntesting_set <- train_data[-dataIndex,]\r\n\r\nmodelcontrol <- trainControl(method=\"cv\", number=10, verboseIter=FALSE)\r\nrfFit <- train(classe ~ ., method = \"rf\", data = training_set, trControl = modelcontrol)\r\n```\r\n\r\n```\r\n## Loading required package: randomForest\r\n```\r\n\r\n```\r\n## randomForest 4.6-12\r\n```\r\n\r\n```\r\n## Type rfNews() to see new features/changes/bug fixes.\r\n```\r\n\r\n```\r\n## \r\n## Attaching package: 'randomForest'\r\n```\r\n\r\n```\r\n## The following object is masked from 'package:ggplot2':\r\n## \r\n##     margin\r\n```\r\n\r\nLets use boosting algorithm with 10-fold cross validation to predict classe.\r\n\r\n```r\r\nboostFit <- train(classe ~ ., method = \"gbm\", data = training_set, verbose = FALSE, trControl = modelcontrol)\r\n```\r\n\r\n```\r\n## Loading required package: plyr\r\n```\r\n\r\nRandom Forest vs Boosting Model Evaluation\r\n===\r\nUse the fitted model to predict the classe in testing dataset. Confusion matrix will compare predicted vs actual values.\r\n\r\n```r\r\npar(mfrow= c(1,2))\r\nplot(rfFit, ylim = c(0.9, 1), main = \"Random Forest model\")\r\n```\r\n\r\n![](PracticalMachineLearning_files/figure-html/Fitevaluation-1.png)<!-- -->\r\n\r\n```r\r\nplot(boostFit, ylim = c(0.9, 1), main = \"Boosting model\")\r\n```\r\n\r\n![](PracticalMachineLearning_files/figure-html/Fitevaluation-2.png)<!-- -->\r\n\r\n```r\r\n# use the random forest model fitted to predict classe in testing set\r\nrfFit_predicted <- predict(rfFit, newdata = testing_set)\r\n\r\n# show confusion matrix to get estimate of out-of-sample error from prediction\r\nconfusionMatrix(testing_set$classe, rfFit_predicted)\r\n```\r\n\r\n```\r\n## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1673    0    0    0    1\r\n##          B    7 1131    1    0    0\r\n##          C    0    5 1021    0    0\r\n##          D    0    0    1  963    0\r\n##          E    0    0    0    5 1077\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.9966          \r\n##                  95% CI : (0.9948, 0.9979)\r\n##     No Information Rate : 0.2855          \r\n##     P-Value [Acc > NIR] : < 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.9957          \r\n##  Mcnemar's Test P-Value : NA              \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity            0.9958   0.9956   0.9980   0.9948   0.9991\r\n## Specificity            0.9998   0.9983   0.9990   0.9998   0.9990\r\n## Pos Pred Value         0.9994   0.9930   0.9951   0.9990   0.9954\r\n## Neg Pred Value         0.9983   0.9989   0.9996   0.9990   0.9998\r\n## Prevalence             0.2855   0.1930   0.1738   0.1645   0.1832\r\n## Detection Rate         0.2843   0.1922   0.1735   0.1636   0.1830\r\n## Detection Prevalence   0.2845   0.1935   0.1743   0.1638   0.1839\r\n## Balanced Accuracy      0.9978   0.9970   0.9985   0.9973   0.9990\r\n```\r\n\r\n```r\r\n# use the boosting model fitted to predict classe in testing set\r\nboostFit_predicted <- predict(boostFit, newdata = testing_set)\r\n\r\n# show confusion matrix to get estimate of out-of-sample error from prediction\r\nconfusionMatrix(testing_set$classe, boostFit_predicted)\r\n```\r\n\r\n```\r\n## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1671    1    2    0    0\r\n##          B   14 1095   24    4    2\r\n##          C    0    9 1016    0    1\r\n##          D    0    7   12  945    0\r\n##          E    0    4    2    8 1068\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.9847          \r\n##                  95% CI : (0.9812, 0.9877)\r\n##     No Information Rate : 0.2863          \r\n##     P-Value [Acc > NIR] : < 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.9807          \r\n##  Mcnemar's Test P-Value : NA              \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity            0.9917   0.9812   0.9621   0.9875   0.9972\r\n## Specificity            0.9993   0.9908   0.9979   0.9961   0.9971\r\n## Pos Pred Value         0.9982   0.9614   0.9903   0.9803   0.9871\r\n## Neg Pred Value         0.9967   0.9956   0.9918   0.9976   0.9994\r\n## Prevalence             0.2863   0.1896   0.1794   0.1626   0.1820\r\n## Detection Rate         0.2839   0.1861   0.1726   0.1606   0.1815\r\n## Detection Prevalence   0.2845   0.1935   0.1743   0.1638   0.1839\r\n## Balanced Accuracy      0.9955   0.9860   0.9800   0.9918   0.9971\r\n```\r\n\r\nFrom above comparison, random forest is the best model that can be used to fit the dataset. \r\n\r\nRebuild selected model\r\n===\r\nSelected model is rebuild with all the training dataset to produce more accurate results.\r\n\r\n```r\r\nmodelFit <- train(classe ~ ., method = \"rf\", data = train_data, trControl = modelcontrol)\r\nmodelFit$finalModel\r\n```\r\n\r\n```\r\n## \r\n## Call:\r\n##  randomForest(x = x, y = y, mtry = param$mtry) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 27\r\n## \r\n##         OOB estimate of  error rate: 0.14%\r\n## Confusion matrix:\r\n##      A    B    C    D    E  class.error\r\n## A 5578    1    0    0    1 0.0003584229\r\n## B    5 3789    2    1    0 0.0021069265\r\n## C    0    5 3417    0    0 0.0014611338\r\n## D    0    0    9 3206    1 0.0031094527\r\n## E    0    0    0    3 3604 0.0008317161\r\n```\r\n\r\nEstimated out of sample error rate for the random forests model is 0.14% as reported by the final model.\r\n\r\nFinal Prediction\r\n===\r\nFinally, predicting the classe of testing dataset provided using the model selected and writing the result to files.\r\n\r\n```r\r\n# predict on test set\r\npreds <- predict(modelFit, newdata=final_test_data)\r\n\r\n# convert predictions to character vector\r\npreds <- as.character(preds)\r\n\r\n# create function to write predictions to files\r\npml_write_files <- function(x) {\r\n    n <- length(x)\r\n    for(i in 1:n) {\r\n        filename <- paste0(\"predicted_output/problem_id_\", i, \".txt\")\r\n        write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)\r\n    }\r\n}\r\n\r\n# create prediction files to submit\r\npml_write_files(preds)\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}